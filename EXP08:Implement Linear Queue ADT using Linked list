#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <malloc.h>
// Node structure
struct Node {
    int data;
    struct Node* next;
};

// Queue structure
struct Queue {
    struct Node *front, *rear;
};

// Function to create a new node
struct Node* createNode(int value) {
    struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
    temp->data = value;
    temp->next = NULL;
    return temp;
}

// Function to initialize the queue
struct Queue* createQueue() {
    struct Queue* q = (struct Queue*)malloc(sizeof(struct Queue));
    q->front = q->rear = NULL;
    return q;
}

// Function to add an element to the queue (enqueue operation)
void enqueue(struct Queue* q, int value) {
    struct Node* temp = createNode(value);

    // If queue is empty, both front and rear will point to the new node
    if (q->rear == NULL) {
        q->front = q->rear = temp;
        return;
    }

    // Add the new node at the end of the queue and change the rear pointer
    q->rear->next = temp;
    q->rear = temp;
}

// Function to remove an element from the queue (dequeue operation)
void dequeue(struct Queue* q) {
    // If the queue is empty, return
    if (q->front == NULL) {
        printf("Queue is empty.\n");
        return;
    }

    // Store the previous front and move the front pointer one node ahead
    struct Node* temp = q->front;
    q->front = q->front->next;

    // If the front becomes NULL, then set rear to NULL as well
    if (q->front == NULL) {
        q->rear = NULL;
    }

    printf("Dequeued element: %d\n", temp->data);
    free(temp);
}

// Function to display the elements in the queue
void display(struct Queue* q) {
    struct Node* temp = q->front;
    if (temp == NULL) {
        printf("Queue is empty.\n");
        return;
    }

    printf("Queue elements: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

// Main function to demonstrate the operations
int main() {
    struct Queue* q = createQueue();
    int choice, value;

    while (1) {
        printf("\nQueue Operations: \n1. Enqueue \n2. Dequeue \n3. Display \n4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value to enqueue: ");
                scanf("%d", &value);
                enqueue(q, value);
                break;
            case 2:
                dequeue(q);
                break;
            case 3:
                display(q);
                break;
            case 4:
                exit(0);
            default:
                printf("Invalid choice! Please enter again.\n");
        }
    }

    return 0;
}
