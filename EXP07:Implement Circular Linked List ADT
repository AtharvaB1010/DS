#include <stdio.h>
#include <conio.h>
#include <stdlib.h>

// Define the node structure for the circular linked list
struct Node {
    int data;              // To hold data in each node
    struct Node* next;     // Pointer to the next node
};

// Function prototypes
struct Node* createNode(int data);
void insertAtBeginning(struct Node** head, int data);
void insertAtEnd(struct Node** head, int data);
void insertAtPosition(struct Node** head, int data, int position);
void deleteAtBeginning(struct Node** head);
void deleteAtEnd(struct Node** head);
void deleteAtPosition(struct Node** head, int position);
void displayList(struct Node* head);

void main() {
    struct Node* head = NULL;  // Initialize the head of the circular linked list as NULL
    int choice, value, position;

    clrscr(); // Clear screen (specific to Turbo C)

    while (1) {
        // Menu for operations on circular linked list
        printf("\nCircular Linked List Operations:");
        printf("\n1. Insert at Beginning");
        printf("\n2. Insert at End");
        printf("\n3. Insert at Specific Position");
        printf("\n4. Delete at Beginning");
        printf("\n5. Delete at End");
        printf("\n6. Delete at Specific Position");
        printf("\n7. Display List");
        printf("\n8. Exit");
        printf("\nEnter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value to insert at beginning: ");
                scanf("%d", &value);
                insertAtBeginning(&head, value);
                break;
            case 2:
                printf("Enter value to insert at end: ");
                scanf("%d", &value);
                insertAtEnd(&head, value);
                break;
            case 3:
                printf("Enter value to insert and position: ");
                scanf("%d %d", &value, &position);
                insertAtPosition(&head, value, position);
                break;
            case 4:
                deleteAtBeginning(&head);
                break;
            case 5:
                deleteAtEnd(&head);
                break;
            case 6:
                printf("Enter position to delete: ");
                scanf("%d", &position);
                deleteAtPosition(&head, position);
                break;
            case 7:
                printf("Circular Linked List: ");
                displayList(head);
                break;
            case 8:
                exit(0);
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }
    getch(); // Wait for user input before closing (specific to Turbo C)
}

// Function to create a new node with given data
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (!newNode) {
        printf("Memory allocation error\n");
        return NULL;
    }
    newNode->data = data;
    newNode->next = newNode;  // Point to itself, as it's a circular list
    return newNode;
}

// Function to insert a node at the beginning of the circular linked list
void insertAtBeginning(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (newNode == NULL) return;

    if (*head == NULL) {  // If the list is empty, make newNode the head
        *head = newNode;
    } else {
        struct Node* temp = *head;
        // Find the last node
        while (temp->next != *head) {
            temp = temp->next;
        }
        temp->next = newNode;  // Link last node to new node
        newNode->next = *head; // Link new node to head
    }
    *head = newNode; // Update head to new node
}

// Function to insert a node at the end of the circular linked list
void insertAtEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (newNode == NULL) return;

    if (*head == NULL) {  // If the list is empty, make newNode the head
        *head = newNode;
    } else {
        struct Node* temp = *head;
        // Find the last node
        while (temp->next != *head) {
            temp = temp->next;
        }
        temp->next = newNode;  // Link last node to new node
        newNode->next = *head; // Link new node to head
    }
}

// Function to insert a node at a specific position in the circular linked list
void insertAtPosition(struct Node** head, int data, int position) {
    struct Node* newNode = createNode(data);
    if (newNode == NULL) return;

    if (position == 1) {
        insertAtBeginning(head, data);
        return;
    }

    struct Node* temp = *head;
    for (int i = 1; i < position - 1 && temp->next != *head; i++) {
        temp = temp->next;
    }

    newNode->next = temp->next; // Link new node to the next node
    temp->next = newNode;       // Link previous node to new node
}

// Function to delete a node at the beginning of the circular linked list
void deleteAtBeginning(struct Node** head) {
    if (*head == NULL) {
        printf("List is empty. Cannot delete.\n");
        return;
    }

    struct Node* temp = *head;
    if (temp->next == *head) {  // Only one node in the list
        free(temp);
        *head = NULL;  // Update head to NULL
        return;
    }

    struct Node* last = *head;
    // Find the last node
    while (last->next != *head) {
        last = last->next;
    }
    last->next = (*head)->next; // Link last node to the second node
    free(*head);                // Free the old head
    *head = last->next;         // Update head to the new head
}

// Function to delete a node at the end of the circular linked list
void deleteAtEnd(struct Node** head) {
    if (*head == NULL) {
        printf("List is empty. Cannot delete.\n");
        return;
    }

    struct Node* temp = *head;
    if (temp->next == *head) {  // Only one node in the list
        free(temp);
        *head = NULL;  // Update head to NULL
        return;
    }

    struct Node* prev = NULL;
    // Find the last node
    while (temp->next != *head) {
        prev = temp;
        temp = temp->next;
    }
    prev->next = *head; // Link the second last node to head
    free(temp);         // Free the last node
}

// Function to delete a node at a specific position in the circular linked list
void deleteAtPosition(struct Node** head, int position) {
    if (*head == NULL) {
        printf("List is empty. Cannot delete.\n");
        return;
    }

    struct Node* temp = *head;

    // If head needs to be removed
    if (position == 1) {
        deleteAtBeginning(head);
        return;
    }

    struct Node* prev = NULL;
    for (int i = 1; i < position && temp->next != *head; i++) {
        prev = temp;
        temp = temp->next;
    }

    if (temp == *head) {  // If the position is greater than the number of nodes
        printf("Position out of range.\n");
        return;
    }

    prev->next = temp->next; // Bypass the node to be deleted
    free(temp);              // Free the memory
}

// Function to display the circular linked list
void displayList(struct Node* head) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }
    struct Node* temp = head;
    do {
        printf("%d -> ", temp->data);
        temp = temp->next;
    } while (temp != head);
    printf("(back to head)\n");
}
